---
// Component for showing related categories (siblings, parent, and children)
import { getCategories, getCategoryBySlug, getSubcategories } from '../lib/pocketbase';

const { categoryId, currentSlug } = Astro.props;

if (!categoryId) {
    return null;
}

// Get the current category
const category = await getCategoryBySlug(currentSlug);
const allCategories = await getCategories();

// Get children categories
let children = [];
if (category) {
    try {
        children = await getSubcategories(category.id);
    } catch (error) {
        console.error('Error fetching subcategories:', error);
    }
}

// Get siblings (other categories with the same parent)
let siblings = [];
if (category && category.parent) {
    siblings = allCategories.filter(cat =>
        cat.parent === category.parent && cat.id !== category.id
    );
}

// Get the parent category if it exists
const parent = category && category.parent
    ? allCategories.find(cat => cat.id === category.parent)
    : null;

// Format the category image URL
const getCategoryImageUrl = (cat) => {
    return cat.image
        ? `http://127.0.0.1:8090/api/files/categories/${cat.id}/${cat.image}`
        : '/placeholder.png';
};

// Check if we have any related categories to display
const hasRelatedCategories = children.length > 0 || siblings.length > 0 || parent;
---

{hasRelatedCategories && (
<div class="bg-base-200 rounded-lg p-4 mb-4">
    <h3 class="text-base font-semibold mb-3">Related Categories</h3>

    <!-- Parent category if exists -->
    {parent && (
            <div class="mb-3">
                <h4 class="text-xs font-medium text-base-content/70 mb-1">Parent Category</h4>
                <a
                        href={`/categories/${parent.slug}`}
                        class="flex items-center gap-2 p-1 rounded hover:bg-base-300 transition-colors text-sm"
                >
                    <div class="avatar">
                        <div class="w-6 h-6 rounded">
                            <img src={getCategoryImageUrl(parent)} alt={parent.name} />
                        </div>
                    </div>
                    <span>{parent.name}</span>
                </a>
            </div>
    )}

    <!-- Child categories if any -->
    {children.length > 0 && (
            <div class="mb-3">
                <h4 class="text-xs font-medium text-base-content/70 mb-1">Subcategories</h4>
                <div class="flex flex-col gap-1">
                    {children.map(child => (
                            <a
                                    href={`/categories/${child.slug}`}
                                    class="flex items-center gap-2 p-1 rounded hover:bg-base-300 transition-colors text-sm"
                            >
                                <div class="avatar">
                                    <div class="w-6 h-6 rounded">
                                        <img src={getCategoryImageUrl(child)} alt={child.name} />
                                    </div>
                                </div>
                                <span class="truncate">{child.name}</span>
                            </a>
                    ))}
                </div>
            </div>
    )}

    <!-- Sibling categories if any -->
    {siblings.length > 0 && (
            <div>
                <h4 class="text-xs font-medium text-base-content/70 mb-1">Related Categories</h4>
                <div class="flex flex-col gap-1">
                    {siblings.map(sibling => (
                            <a
                                    href={`/categories/${sibling.slug}`}
                                    class="flex items-center gap-2 p-1 rounded hover:bg-base-300 transition-colors text-sm"
                            >
                                <div class="avatar">
                                    <div class="w-6 h-6 rounded">
                                        <img src={getCategoryImageUrl(sibling)} alt={sibling.name} />
                                    </div>
                                </div>
                                <span class="truncate">{sibling.name}</span>
                            </a>
                    ))}
                </div>
            </div>
    )}
</div>
    )}
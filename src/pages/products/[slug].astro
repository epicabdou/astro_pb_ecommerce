---
import MainLayout from '../../layouts/MainLayout.astro';
import ProductCard from '../../components/ProductCard.vue';
import AddToCartButton from '../../components/AddToCartButton.vue';
import {
    getProductBySlug,
    getProductReviews,
    isAuthenticated,
    authStore,
    createReview,
    addToWishlist,
    removeFromWishlist,
    getUserWishlist,
    getProducts
} from '../../lib/pocketbase';
import { pb } from '../../lib/pocketbase';

// Get the slug from the URL
const { slug } = Astro.params;

if (!slug) {
    return Astro.redirect('/products');
}

// Fetch the product details
const product = await getProductBySlug(slug);

if (!product) {
    return Astro.redirect('/404');
}

// Fetch product reviews
const reviewsData = await getProductReviews(product.id);
const reviews = reviewsData.items;

// Calculate average rating
const avgRating = reviews.length > 0
    ? reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length
    : 0;

// Check if product is in user's wishlist
let isInWishlist = false;
let wishlistId = '';

if (isAuthenticated()) {
    const wishlistData = await getUserWishlist(authStore.model.id);
    const wishlistItem = wishlistData.items.find(item => item.product === product.id);
    isInWishlist = !!wishlistItem;
    wishlistId = wishlistItem?.id || '';
}

// Fetch related products (from same category)
let relatedProducts = [];
if (product.expand?.category?.length > 0) {
    const categoryId = product.expand.category[0].id;
    const relatedData = await pb.collection('products').getList(1, 4, {
        filter: `category ~ "${categoryId}" && id != "${product.id}"`,
        sort: '-created',
        expand: 'category,tags',
    });
    relatedProducts = relatedData.items;
}

// Handle form submissions
if (Astro.request.method === 'POST') {
    const formData = await Astro.request.formData();
    const action = formData.get('action');

    if (!isAuthenticated()) {
        return Astro.redirect('/login?redirect=' + Astro.url.pathname);
    }

    if (action === 'addReview') {
        const rating = Number(formData.get('rating'));
        const comment = formData.get('comment');

        if (rating && comment) {
            await createReview({
                product: product.id,
                user: authStore.model.id,
                rating,
                comment
            });
        }

        return Astro.redirect(Astro.url.pathname);
    }

    if (action === 'toggleWishlist') {
        if (isInWishlist) {
            await removeFromWishlist(wishlistId);
        } else {
            await addToWishlist(authStore.model.id, product.id);
        }

        return Astro.redirect(Astro.url.pathname);
    }
}

// Format image URLs
const mainImageUrl = product.image ? `http://127.0.0.1:8090/api/files/products/${product.id}/${product.image}` : '/placeholder.png';
const galleryImages = product.gallery ? product.gallery.map(img => `http://127.0.0.1:8090/api/files/products/${product.id}/${img}`) : [];

// Helper for price formatting
const formatPrice = (price) => {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    }).format(price);
};
---

<MainLayout>
    <div class="container mx-auto px-4 py-8">
        <!-- Breadcrumb navigation -->
        <div class="breadcrumbs text-sm mb-6">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/products">Products</a></li>
                {product.expand?.category?.length > 0 && (
                        <li>
                            <a href={`/products?category=${product.expand.category[0].slug}`}>
                                {product.expand.category[0].name}
                            </a>
                        </li>
                )}
                <li>{product.name}</li>
            </ul>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
            <!-- Product Images -->
            <div class="space-y-4">
                <!-- Main product image with badges -->
                <div class="relative">
                    <img
                            src={mainImageUrl}
                            alt={product.name}
                            class="w-full rounded-xl h-[500px] object-cover object-center"
                    />

                    {product.isFeatured && (
                            <div class="absolute top-4 right-4">
                                <div class="badge badge-secondary">Featured</div>
                            </div>
                    )}

                    {product.promoPrice && (
                            <div class="absolute top-4 left-4">
                                <div class="badge badge-accent">Sale</div>
                            </div>
                    )}
                </div>

                <!-- Image Gallery -->
                {galleryImages.length > 0 && (
                        <div class="grid grid-cols-4 gap-2">
                            {galleryImages.map(img => (
                                    <img
                                            src={img}
                                            alt={product.name}
                                            class="h-24 w-full object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity"
                                    />
                            ))}
                        </div>
                )}
            </div>

            <!-- Product Details -->
            <div>
                <h1 class="text-4xl font-bold mb-2">{product.name}</h1>

                <!-- Price Section -->
                <div class="flex items-baseline gap-2 mb-4">
                    {product.promoPrice ? (
                            <>
                                <span class="text-3xl font-bold text-primary">{formatPrice(product.promoPrice)}</span>
                                <span class="text-xl line-through opacity-70">{formatPrice(product.price)}</span>
                                <span class="badge badge-accent ml-2">
                {Math.round((1 - product.promoPrice / product.price) * 100)}% OFF
              </span>
                            </>
                    ) : (
                            <span class="text-3xl font-bold">{formatPrice(product.price)}</span>
                    )}
                </div>

                <!-- Rating summary -->
                <div class="flex items-center gap-2 mb-4">
                    <div class="rating rating-sm">
                        {[1, 2, 3, 4, 5].map(value => (
                                <input
                                        type="radio"
                                        name="product-rating"
                                        class="mask mask-star-2 bg-orange-400"
                                        checked={Math.round(avgRating) === value}
                                        disabled
                                />
                        ))}
                    </div>
                    <span class="text-sm">
            {avgRating.toFixed(1)} ({reviews.length} {reviews.length === 1 ? 'review' : 'reviews'})
          </span>
                </div>

                <!-- Stock Status -->
                <div class="mb-6">
                    {product.stock === 0 ? (
                            <div class="badge badge-lg badge-error gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                                Out of stock
                            </div>
                    ) : (
                            <div class="badge badge-lg badge-success gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                                </svg>
                                In stock ({product.stock} available)
                            </div>
                    )}
                </div>

                <!-- Short Description -->
                <p class="text-base-content/80 mb-8">{product.shortDescription}</p>

                <!-- Add to Cart / Wishlist -->
                <div class="flex flex-wrap gap-4 mb-8">
                    <!-- AddToCartButton component -->
                    <AddToCartButton
                            client:load
                            product={product}
                            showQuantity={true}
                            buttonText="Add to Cart"
                            buttonClass="btn-primary flex-1"
                    />

                    <form method="POST">
                        <input type="hidden" name="action" value="toggleWishlist" />
                        <button
                                type="submit"
                                class={`btn ${isInWishlist ? 'btn-error' : 'btn-outline'}`}
                                title={isInWishlist ? 'Remove from Wishlist' : 'Add to Wishlist'}
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill={isInWishlist ? "currentColor" : "none"} viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                            </svg>
                        </button>
                    </form>
                </div>

                <!-- Categories & Tags -->
                <div class="space-y-4 mb-8">
                    <div>
                        <span class="font-semibold">Categories:</span>
                        <div class="flex flex-wrap gap-2 mt-2">
                            {product.expand?.category?.map(cat => (
                                    <a href={`/products?category=${cat.slug}`} class="badge badge-outline">
                                        {cat.name}
                                    </a>
                            ))}
                        </div>
                    </div>

                    <div>
                        <span class="font-semibold">Tags:</span>
                        <div class="flex flex-wrap gap-2 mt-2">
                            {product.expand?.tags?.map(tag => (
                                    <a href={`/products?tag=${tag.slug}`} class="badge badge-outline">
                                        {tag.name}
                                    </a>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Product Tabs (Description & Reviews) -->
        <div class="mb-12">
            <div class="tabs tabs-lifted">
                <input type="radio" name="product_tabs" id="tab-description" class="tab" checked />
                <label for="tab-description" class="tab font-medium">Description</label>
                <div class="tab-content bg-base-100 border-base-300 rounded-box p-6">
                    <article class="prose max-w-none">
                        <Fragment set:html={product.longDescription} />
                    </article>
                </div>

                <input type="radio" name="product_tabs" id="tab-reviews" class="tab" />
                <label for="tab-reviews" class="tab font-medium">Reviews ({reviews.length})</label>
                <div class="tab-content bg-base-100 border-base-300 rounded-box p-6">
                    <div class="mb-8">
                        <!-- Rating Summary -->
                        <div class="mb-8">
                            <h3 class="text-xl font-semibold mb-4">Customer Reviews</h3>
                            <div class="flex flex-col md:flex-row gap-8 items-start">
                                <!-- Average rating display -->
                                <div class="stat bg-base-200 rounded-lg">
                                    <div class="stat-title">Average Rating</div>
                                    <div class="stat-value text-primary">{avgRating.toFixed(1)}/5</div>
                                    <div class="stat-desc">Based on {reviews.length} reviews</div>
                                </div>

                                <!-- Rating distribution -->
                                <div class="flex-1 w-full">
                                    {[5, 4, 3, 2, 1].map(stars => {
                                        const count = reviews.filter(r => r.rating === stars).length;
                                        const percentage = reviews.length > 0 ? (count / reviews.length) * 100 : 0;

                                        return (
                                                <div class="flex items-center gap-2 mb-2">
                                                    <div class="w-10 text-sm text-right">{stars} star</div>
                                                    <progress class="progress progress-primary w-full" value={percentage} max="100"></progress>
                                                    <div class="text-sm">{count}</div>
                                                </div>
                                        );
                                    })}
                                </div>
                            </div>
                        </div>

                        <!-- Add Review Form -->
                        {isAuthenticated() ? (
                                <div class="bg-base-200 p-6 rounded-lg mb-8">
                                    <h4 class="font-semibold text-lg mb-4">Write a Review</h4>
                                    <form method="POST" class="space-y-4">
                                        <input type="hidden" name="action" value="addReview" />

                                        <div>
                                            <label class="label">Your Rating</label>
                                            <div class="rating rating-lg">
                                                {[1, 2, 3, 4, 5].map(value => (
                                                        <input type="radio" name="rating" value={value} class="mask mask-star-2 bg-orange-400" required />
                                                ))}
                                            </div>
                                        </div>

                                        <div>
                                            <label class="label">Your Review</label>
                                            <textarea name="comment" class="textarea textarea-bordered w-full" rows="4" required></textarea>
                                        </div>

                                        <button type="submit" class="btn btn-primary">Submit Review</button>
                                    </form>
                                </div>
                        ) : (
                                <div class="alert alert-info mb-8">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span>Please <a href={`/login?redirect=${Astro.url.pathname}`} class="font-bold hover:underline">log in</a> to write a review.</span>
                                </div>
                        )}

                        <!-- Reviews List with Divider -->
                        <div class="divider">Customer Feedback</div>

                        {reviews.length === 0 ? (
                                <div class="text-center py-8 bg-base-200 rounded-lg">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12 mx-auto mb-2 opacity-50">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 01.865-.501 48.172 48.172 0 003.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z" />
                                    </svg>
                                    <p class="text-lg font-medium">No reviews yet</p>
                                    <p class="text-base-content/70">Be the first to review this product!</p>
                                </div>
                        ) : (
                                <div class="space-y-6">
                                    {reviews.map(review => (
                                            <div class="card bg-base-100 shadow-sm">
                                                <div class="card-body">
                                                    <div class="flex justify-between items-center">
                                                        <div class="flex items-center gap-3">
                                                            <div class="avatar placeholder">
                                                                <div class="bg-neutral text-neutral-content rounded-full w-12">
                                                                    <span>{review.expand?.user?.name?.charAt(0) || 'A'}</span>
                                                                </div>
                                                            </div>
                                                            <div>
                                                                <h4 class="font-bold">{review.expand?.user?.name || 'Anonymous'}</h4>
                                                                <div class="rating rating-sm">
                                                                    {[1, 2, 3, 4, 5].map(value => (
                                                                            <input
                                                                                    type="radio"
                                                                                    class="mask mask-star-2 bg-orange-400"
                                                                                    checked={value === review.rating}
                                                                                    disabled
                                                                            />
                                                                    ))}
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <time class="text-sm opacity-70">{new Date(review.created).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}</time>
                                                    </div>

                                                    <p class="mt-2">{review.comment}</p>
                                                </div>
                                            </div>
                                    ))}
                                </div>
                        )}
                    </div>
                </div>
            </div>
        </div>

        <!-- Related Products -->
        <div>
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold">You Might Also Like</h2>
                <a href="/products" class="btn btn-sm btn-outline">
                    View All Products
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 ml-1">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 8.25L21 12m0 0l-3.75 3.75M21 12H3" />
                    </svg>
                </a>
            </div>

            {relatedProducts.length === 0 ? (
                    <div class="card bg-base-200 shadow-lg mb-6">
                        <div class="card-body p-8 flex flex-col items-center justify-center text-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12 opacity-50 mb-3">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M20.25 7.5l-.625 10.632a2.25 2.25 0 01-2.247 2.118H6.622a2.25 2.25 0 01-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125z" />
                            </svg>
                            <p class="text-lg font-medium">No related products found</p>
                            <p class="text-base-content/70">Check out our other products in our collection</p>
                            <a href="/products" class="btn btn-primary mt-4">Browse Products</a>
                        </div>
                    </div>
            ) : (
                    <div class="carousel carousel-center w-full p-4 space-x-4 rounded-box bg-base-200">
                        {relatedProducts.map(relatedProduct => (
                                <div class="carousel-item w-64 md:w-80">
                                    <ProductCard product={relatedProduct} client:visible />
                                </div>
                        ))}
                    </div>
            )}
        </div>
    </div>
</MainLayout>